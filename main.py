import logging
from datetime import datetime
import pytz

# –£–±–∏—Ä–∞–µ–º 'src.' –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
from gemini_client import configure_gemini, generate_digest
from telegram_client import send_message, send_admin_notification
# –¢–µ–ø–µ—Ä—å –º—ã –ò–°–ü–û–õ–¨–ó–£–ï–ú —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
from news_fetcher import fetch_news 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def read_prompt_template() -> str:
    """–ß–∏—Ç–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open("prompt.md", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        logger.error("–§–∞–π–ª prompt.md –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ai_digest_bot...")
    try:
        configure_gemini()
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π ---
        # –£–¥–∞–ª—è–µ–º –≤—ã–∑–æ–≤ –∑–∞–≥–ª—É—à–∫–∏ –∏ –≤—ã–∑—ã–≤–∞–µ–º fetch_news
        news_context = fetch_news(limit_per_feed=3) # –ë–µ—Ä–µ–º –ø–æ 3 –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
        
        if "–ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in news_context:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            await send_admin_notification("‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ aidigestbot** ‚ÑπÔ∏è\n\n–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            return

        prompt_template = read_prompt_template()
        
        moscow_tz = pytz.timezone("Europe/Moscow")
        current_date = datetime.now(moscow_tz).strftime("%d.%m.%Y")
        
        final_prompt = prompt_template.format(news_context=news_context, current_date=current_date)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("--- –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini ---")
        logger.info(final_prompt)
        logger.info("---------------------------------")
        
        digest_text, error_reason = await generate_digest(final_prompt)
        
        if digest_text:
            await send_message(digest_text)
            logger.info("–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            error_message_for_admin = (
                "üî¥ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ai_digest_bot** üî¥\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç.\n\n"
                f"**–ü—Ä–∏—á–∏–Ω–∞:** {error_reason or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç Gemini'}"
            )
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É...")
            await send_admin_notification(error_message_for_admin)

    except Exception as e:
        critical_error_message = (
            "üÜò **–ü–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ —Å–∏—Å—Ç–µ–º—ã aidigest_bot** üÜò\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}\n\n"
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
        )
        logger.critical(f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        try:
            await send_admin_notification(critical_error_message)
        except Exception as admin_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_e}")
    
    logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
