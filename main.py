import asyncio
import logging
from datetime import datetime
import pytz

from src.gemini_client import configure_gemini, generate_digest
from src.telegram_client import send_message, send_admin_notification
from src.news_fetcher import fetch_news # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_news_from_sources() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
    !!! –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê !!!
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞)...")
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ news_fetcher
    mock_news = """
    –ù–æ–≤–æ—Å—Ç—å 1: Google –≤—ã–ø—É—Å—Ç–∏–ª–∞ –º–æ–¥–µ–ª—å Gemini 2.5 Pro, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ—à–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.
    –°—Å—ã–ª–∫–∞: https://blog.google/technology/ai/google-gemini-update-flash-2-5-pro/
    
    –ù–æ–≤–æ—Å—Ç—å 2: –°—Ç–∞—Ä—Ç–∞–ø Cognition AI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª Devin, –ø–µ—Ä–≤–æ–≥–æ –≤ –º–∏—Ä–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ AI-–∏–Ω–∂–µ–Ω–µ—Ä–∞, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.
    –°—Å—ã–ª–∫–∞: https://www.cognition-labs.com/blog/introducing-devin
    """
    return mock_news

def read_prompt_template() -> str:
    """–ß–∏—Ç–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open("prompt.md", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        logger.error("–§–∞–π–ª prompt.md –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ai_digest_bot...")
    try:
        configure_gemini()
        news_context = get_news_from_sources()
        prompt_template = read_prompt_template()
        
        moscow_tz = pytz.timezone("Europe/Moscow")
        current_date = datetime.now(moscow_tz).strftime("%d.%m.%Y")
        
        final_prompt = prompt_template.format(news_context=news_context, current_date=current_date)
        
        digest_text, error_reason = generate_digest(final_prompt)
        
        if digest_text:
            await send_message(digest_text)
        else:
            # –ï—Å–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            error_message_for_admin = (
                "üî¥ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ai_digest_bot** üî¥\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç.\n\n"
                f"**–ü—Ä–∏—á–∏–Ω–∞:** {error_reason or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
            )
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É...")
            await send_admin_notification(error_message_for_admin)

    except Exception as e:
        critical_error_message = (
            "üÜò **–ü–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ —Å–∏—Å—Ç–µ–º—ã ai_digest_bot** üÜò\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}\n\n"
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
        )
        logger.critical(f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        try:
            await send_admin_notification(critical_error_message)
        except Exception as admin_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_e}")
    
    logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    asyncio.run(main())